DROP DATABASE cati_manager;
DROP ROLE cati_manager;

\set ON_ERROR_STOP on

CREATE ROLE cati_manager LOGIN
  ENCRYPTED PASSWORD 'md5eeba30ce2ee2d67dde68efeb0476e94f'
  NOSUPERUSER NOINHERIT NOCREATEDB CREATEROLE NOREPLICATION;

CREATE DATABASE cati_manager
  WITH OWNER = cati_manager;

\connect cati_manager
SET ROLE cati_manager;


CREATE TABLE identity ( login TEXT PRIMARY KEY, email TEXT, first_name TEXT, last_name TEXT, validated_by TEXT REFERENCES identity(login) );

CREATE FUNCTION create_identity_role() RETURNS trigger AS $$
BEGIN
    EXECUTE 'CREATE ROLE ' || quote_ident(NEW.login) || ' LOGIN;';
    EXECUTE 'GRANT ' || quote_ident(NEW.login) || ' TO cati_manager;';
    RETURN NEW;
END $$ LANGUAGE plpgsql;
CREATE TRIGGER create_identity_role BEFORE INSERT ON identity FOR EACH ROW EXECUTE PROCEDURE create_identity_role();

CREATE OR REPLACE FUNCTION delete_identity_role() RETURNS trigger AS $$
BEGIN
    EXECUTE 'REVOKE ' || quote_ident(OLD.login) || ' FROM cati_manager;';
    EXECUTE 'REASSIGN OWNED BY ' || quote_ident(OLD.login) || ' TO CURRENT_USER;';
    EXECUTE 'DROP OWNED BY ' || quote_ident(OLD.login) || ';';
    EXECUTE 'DROP ROLE ' || quote_ident(OLD.login) || ';';
    RETURN NEW;
END $$ LANGUAGE plpgsql;
CREATE TRIGGER delete_identity_role BEFORE DELETE ON identity FOR EACH ROW EXECUTE PROCEDURE delete_identity_role();



CREATE TABLE project ( id TEXT PRIMARY KEY, 
                       name TEXT,
                       description TEXT );
CREATE TABLE resource ( id TEXT PRIMARY KEY, 
                       name TEXT,
                       description TEXT );
CREATE TABLE credential ( project TEXT REFERENCES project, 
                          id TEXT, name TEXT, 
                          description TEXT, 
                          resource TEXT REFERENCES resource, 
                          resource_access TEXT [],
                          PRIMARY KEY ( project, id ) );

CREATE FUNCTION create_credential_role() RETURNS trigger AS $$
BEGIN
    EXECUTE 'CREATE ROLE ' || quote_ident(NEW.id) || ' NOLOGIN;';
    RETURN NEW;
END $$ LANGUAGE plpgsql;
CREATE TRIGGER create_credential_role BEFORE INSERT ON credential FOR EACH ROW EXECUTE PROCEDURE create_credential_role();

CREATE FUNCTION delete_credential_role() RETURNS trigger AS $$
BEGIN
    EXECUTE 'REASSIGN OWNED BY ' || quote_ident(OLD.id) || ' TO CURRENT_USER;';
    EXECUTE 'DROP OWNED BY ' || quote_ident(OLD.id) || ';';
    EXECUTE 'DROP ROLE ' || quote_ident(OLD.id) || ';';
    RETURN OLD;
END $$ LANGUAGE plpgsql;
CREATE TRIGGER delete_credential_role BEFORE DELETE ON credential FOR EACH ROW EXECUTE PROCEDURE delete_credential_role();
